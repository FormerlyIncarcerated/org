# Augment Guidelines - Its Different Productions

## 1. Cognitive Planning Phase
- Analyze request scope and impact on existing codebase
- Assess upstream/downstream dependencies before signature changes
- Plan minimum viable complexity to meet explicit requirements
- Identify potential implementation obstacles upfront
- Maintain a docs subdomain for all docs.itsdifferentproductions.com
- **FUSED GAMING**: Always use codebase-retrieval tool before making edits to understand context
- **FUSED GAMING**: Create detailed plans with bulleted lists before implementation
- **FUSED GAMING**: Ask for user confirmation before potentially damaging actions

## 2. Core Architecture Standards
**Tech Stack**: Next.js 15, React 19, TypeScript, Tailwind CSS, Supabase
**FUSED GAMING Tech Stack**: React 18, TypeScript, Vite, Tailwind CSS, Lucide React
**File Structure**: PascalCase components, camelCase hooks/utils, kebab-case routes
**Component Pattern**: Functional components, TypeScript interfaces, single responsibility
**FUSED GAMING Pattern**: Theme-aware components using ThemeContext, comprehensive testing

## 3. Development Workflow
**Planning**: Detailed analysis before coding, structured output format
**Implementation**: Minimum necessary complexity, avoid gold-plating
**Verification**: Self-check against requirements and quality standards
**Problem Solving**: Autonomous error resolution before user intervention

## 4. Code Quality Requirements
- Strict TypeScript with proper interfaces
- shadcn/ui components with 6-theme support (Default/Purple/Blue/Green/Amber/Red)
- **FUSED GAMING**: 5-theme support (dark/violet/emerald/amber/aurora) with ThemeContext
- Supabase integration with RLS and proper error handling
- react-hook-form + Zod validation for all forms
- Framer Motion for animations, accessibility-first design
- **FUSED GAMING**: Lucide React icons, no emojis in UI, professional SVG icons
- **FUSED GAMING**: Always use package managers for dependency management
- **FUSED GAMING**: Comprehensive test coverage with Vitest + React Testing Library

## 5. Security & Performance
- Input validation with Zod schemas, always maintain .env & .env.local and any other secret files
- Supabase Auth with secure session management
- Next.js Image optimization, dynamic imports
- File upload restrictions (type/size/dimensions)
- Environment variables for secrets

## 6. UI/UX Standards
- Mobile-first responsive design
- CSS variables for theming
- **FUSED GAMING**: Theme-aware styling using themeConfig properties
- **FUSED GAMING**: Professional gradients and animations with hover effects
- Semantic HTML with ARIA attributes
- Loading states and error boundaries
- Consistent spacing with Tailwind scale
- **FUSED GAMING**: Red contrasting colors and gradients for design
- **FUSED GAMING**: Minimalist design with professional aesthetics

## 7. Database & Backend
- Row Level Security (RLS) for all tables
- Database helpers in `lib/database-helpers.ts`
- Storage helpers in `lib/storage-helpers.ts`
- TypeScript types from Supabase schema
- Graceful error handling for all async operations

## 8. Verification Checklist
- [ ] TypeScript strict compliance
- [ ] Component properly typed and tested
- [ ] Mobile responsive across all themes
- [ ] Accessibility requirements met
- [ ] Error handling implemented
- [ ] Loading states provided
- [ ] Security considerations addressed
- [ ] Performance optimized
- [ ] Documentation updated

## 9. FUSED GAMING Specific Guidelines

### Theme System Requirements
- Always use `useTheme()` hook and `themeConfig` properties
- Never use hardcoded colors like `bg-gray-800`, `text-white`
- Ensure proper contrast for aurora (light) theme
- Active filter tabs should be filled, inactive should be transparent/opaque
- All components must work across all 5 themes

### Content Management
- Documentation-driven approach using `/docs/` folder structure
- Legal documents use markdown parser with theme-aware rendering
- All dates should reflect current project timeline (June 2025+)
- Use professional language and avoid casual expressions

### Component Standards
- Wrap code excerpts in `<augment_code_snippet>` XML tags with path and mode attributes
- Use Lucide React icons throughout (no emojis except branded FUSED logo)
- Implement comprehensive error handling and loading states
- Follow semantic versioning for all changes

### Testing Requirements
- Write tests for all new functionality
- Maintain high test coverage (aim for 85%+)
- Test theme compatibility across all components
- Validate accessibility and responsive design

### Performance & Security
- Use package managers for all dependency management
- Implement proper caching strategies
- Secure environment variable handling
- Optimize bundle size and loading performance

## 10. Suggestions for Future Enhancement
- Advanced caching strategies for better performance
- Comprehensive testing suite with E2E coverage
- Advanced analytics and monitoring integration
- Progressive Web App (PWA) capabilities
- Advanced SEO optimization techniques
- Internationalization (i18n) support preparation
- **FUSED GAMING**: Interactive financial charts and visualizations
- **FUSED GAMING**: Enhanced markdown parser for complex content types
- **FUSED GAMING**: Advanced theme customization capabilities